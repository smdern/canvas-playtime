// Generated by CoffeeScript 1.4.0
(function() {
  var Game,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Game = (function() {

    function Game() {
      this.drawRect = __bind(this.drawRect, this);

      this.draw = __bind(this.draw, this);

      this.clear = __bind(this.clear, this);

      this.drawCircle = __bind(this.drawCircle, this);

      this.moveRect = __bind(this.moveRect, this);

      this.moveKeys = __bind(this.moveKeys, this);

      this.setupKeys = __bind(this.setupKeys, this);

      var $canvas;
      $canvas = $('canvas');
      this.context = $canvas[0].getContext('2d');
      this.width = $canvas.width();
      this.height = $canvas.height();
      this.setupKeys();
    }

    Game.prototype.rectX = 100;

    Game.prototype.rectY = 100;

    Game.prototype.setupKeys = function() {
      return key('up, down, left, right', this.moveKeys);
    };

    Game.prototype.moveKeys = function() {
      var dx, dy, keys, moveSpeed,
        _this = this;
      keys = key.getPressedKeyCodes();
      moveSpeed = 2;
      dy = 0;
      dx = 0;
      _.each(keys, function(key) {
        switch (key) {
          case 37:
            return dx -= moveSpeed;
          case 38:
            return dy -= moveSpeed;
          case 39:
            return dx += moveSpeed;
          case 40:
            return dy += moveSpeed;
          default:
            return console.log('unknown key', key);
        }
      });
      return this.moveRect(dy, dx);
    };

    Game.prototype.moveRect = function(dy, dx) {
      if (dy == null) {
        dy = 0;
      }
      if (dx == null) {
        dx = 0;
      }
      this.clear();
      this.rectX += dx;
      this.rectY += dy;
      return this.drawRect(this.rectX, this.rectY, 20, 20);
    };

    Game.prototype.colors = {
      green: "#33A534",
      black: "#000000",
      red: "#FF2600"
    };

    Game.prototype.drawCircle = function(x, y, r, fillColor) {
      if (fillColor == null) {
        fillColor = this.colors.green;
      }
      this.context.fillStyle = fillColor;
      this.context.beginPath();
      this.context.arc(x, y, r, 0, 2 * Math.Pi, true);
      this.context.closePath();
      return this.context.fill();
    };

    Game.prototype.clear = function() {
      return this.context.clearRect(0, 0, this.width, this.height);
    };

    Game.prototype.draw = function() {
      this.clear();
      return this.drawRect(this.rectX, this.rectY, 20, 20);
    };

    Game.prototype.drawRect = function(x, y, width, height, fillColor) {
      if (fillColor == null) {
        fillColor = this.colors.red;
      }
      this.context.fillStyle = fillColor;
      this.context.beginPath();
      this.context.rect(x, y, width, height);
      this.context.closePath();
      return this.context.fill();
    };

    return Game;

  })();

  $(document).ready(function() {
    var PlayTime;
    PlayTime = {};
    PlayTime.game = new Game();
    return PlayTime.game.draw();
  });

}).call(this);
