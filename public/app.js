// Generated by CoffeeScript 1.4.0
(function() {
  var Behaviors, Box, CirclePainter, Colors, Game, Sprite, UserInputs,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Behaviors = {
    moveBall: {
      execute: function(sprite, context, dt) {
        sprite.left += sprite.velocityX * dt;
        return sprite.top += sprite.velocityY * dt;
      }
    }
  };

  Box = (function() {

    Box.prototype.defaultOptions = {
      x: 0,
      y: 0,
      width: 10,
      height: 10,
      fillStyle: 'black',
      lineWidth: 5
    };

    function Box(args) {
      this.draw = __bind(this.draw, this);

      var _this = this;
      _.defaults(args, this.defaultOptions);
      _.each(['x', 'y', 'width', 'height', 'fillStyle'], function(option) {
        return _this[option] = args[option];
      });
    }

    Box.prototype.draw = function(context, dx, dy) {
      if (dx == null) {
        dx = 0;
      }
      if (dy == null) {
        dy = 0;
      }
      this.x += dx;
      this.y += dy;
      context.fillStyle = this.fillStyle;
      context.beginPath();
      context.rect(this.x, this.y, this.width, this.height);
      context.closePath();
      return context.fill();
    };

    return Box;

  })();

  CirclePainter = (function() {

    function CirclePainter() {
      this.paint = __bind(this.paint, this);

    }

    CirclePainter.prototype.paint = function(sprite, context) {
      var radius, x, y;
      x = sprite.left + sprite.width / 2;
      y = sprite.top + sprite.height / 2;
      radius = sprite.width / 2;
      context.save();
      context.beginPath();
      context.arc(x, y, radius, 0, 2 * Math.PI, false);
      context.clip();
      context.shadowColor = 'rgb(0,0,0)';
      context.shadowOffsetX = -4;
      context.shadowOffsetY = -4;
      context.shadowBlur = 8;
      context.fillStyle = Colors.red;
      context.fill();
      context.lineWidth = 5;
      context.strokeStyle = Colors.black;
      context.stroke();
      return context.restore();
    };

    return CirclePainter;

  })();

  Colors = {
    green: "#33A534",
    black: "#000000",
    red: "#FF2600"
  };

  Game = (function() {

    Game.prototype.isRunning = false;

    Game.prototype.defaultBall = {
      painter: new CirclePainter(),
      velocityY: 1,
      velocityX: 3,
      width: 20,
      left: 10,
      top: 10,
      behaviors: [Behaviors.moveBall]
    };

    function Game() {
      this.handleEdgeCollisions = __bind(this.handleEdgeCollisions, this);

      this.draw = __bind(this.draw, this);

      this.updateBalls = __bind(this.updateBalls, this);

      this.update = __bind(this.update, this);

      this.clear = __bind(this.clear, this);

      this.animate = __bind(this.animate, this);

      this.stop = __bind(this.stop, this);

      this.start = __bind(this.start, this);

      this.spawnBall = __bind(this.spawnBall, this);

      this.togglePause = __bind(this.togglePause, this);

      var $canvas;
      $canvas = $('canvas');
      this.context = $canvas[0].getContext('2d');
      this.width = $canvas.width();
      this.height = $canvas.height();
      this.ballSprites = [];
      this.ballSprites.push(new Sprite(this.defaultBall));
      $canvas.click(this.spawnBall);
      key('space', this.togglePause);
    }

    Game.prototype.togglePause = function() {
      return this.isRunning = !this.isRunning;
    };

    Game.prototype.spawnBall = function(event) {
      var ball;
      if (!this.isRunning) {
        return;
      }
      ball = this.defaultBall;
      ball.left = event.clientX;
      ball.top = event.clientY;
      ball.velocityY = Math.floor((Math.random() * 5) + 1);
      ball.velocityX = Math.floor((Math.random() * 5) + 1);
      return this.ballSprites.push(new Sprite(ball));
    };

    Game.prototype.start = function() {
      this.isRunning = true;
      return requestNextAnimationFrame.call(window, this.animate);
    };

    Game.prototype.stop = function() {
      return this.isRunning = false;
    };

    Game.prototype.prevTime = Date.now();

    Game.prototype.animate = function(time) {
      var dt;
      dt = (time - this.prevTime) / 10;
      this.prevTime = time;
      if (this.isRunning) {
        this.clear();
        this.update(dt);
        this.draw();
      }
      return requestNextAnimationFrame.call(window, this.animate);
    };

    Game.prototype.clear = function() {
      return this.context.clearRect(0, 0, this.width, this.height);
    };

    Game.prototype.update = function(time) {
      this.handleEdgeCollisions();
      return this.updateBalls(time);
    };

    Game.prototype.updateBalls = function(time) {
      var _this = this;
      return _.each(this.ballSprites, function(ballSprite) {
        return ballSprite.update(_this.context, time);
      });
    };

    Game.prototype.draw = function() {
      var _this = this;
      return _.each(this.ballSprites, function(ballSprite) {
        return ballSprite.paint(_this.context);
      });
    };

    Game.prototype.handleEdgeCollisions = function() {
      var _this = this;
      return _.each(this.ballSprites, function(ballSprite) {
        var bottom, boundingBox, right;
        boundingBox = ballSprite.getBoundingBox();
        right = boundingBox.left + boundingBox.width;
        bottom = boundingBox.top + boundingBox.height;
        if (right > _this.width || boundingBox.left < 0) {
          ballSprite.velocityX *= -1;
        }
        if (bottom > _this.height || boundingBox.top < 0) {
          return ballSprite.velocityY *= -1;
        }
      });
    };

    return Game;

  })();

  $(document).ready(function() {
    var PlayTime;
    PlayTime = {};
    PlayTime.game = new Game();
    return PlayTime.game.start();
  });

  Sprite = (function() {

    Sprite.prototype.defaultOptions = {
      name: null,
      painter: null,
      top: 0,
      left: 0,
      height: 10,
      width: 10,
      velocityX: 0,
      velocityY: 0,
      visible: true,
      animating: true,
      behaviors: []
    };

    function Sprite(args) {
      this.getBoundingBox = __bind(this.getBoundingBox, this);

      this.update = __bind(this.update, this);

      this.paint = __bind(this.paint, this);

      var _this = this;
      _.defaults(args, this.defaultOptions);
      _.each(args, function(value, key) {
        return _this[key] = args[key];
      });
    }

    Sprite.prototype.paint = function(context) {
      if (this.painter && this.visible) {
        return this.painter.paint(this, context);
      }
    };

    Sprite.prototype.update = function(context, time) {
      var _this = this;
      if (this.animating) {
        return _.each(this.behaviors, function(behavior) {
          return behavior.execute(_this, context, time);
        });
      }
    };

    Sprite.prototype.getBoundingBox = function() {
      return {
        top: this.top,
        left: this.left,
        height: this.height,
        width: this.width
      };
    };

    return Sprite;

  })();

  UserInputs = (function() {

    function UserInputs() {
      this.getDirection = __bind(this.getDirection, this);

      this.updateCurrentKeys = __bind(this.updateCurrentKeys, this);

    }

    UserInputs.prototype.previousKeys = [];

    UserInputs.prototype.currentKeys = [];

    UserInputs.prototype.updateCurrentKeys = function() {
      this.previousKeys = this.currentKeys;
      return this.currentKeys = key.getPressedKeyCodes();
    };

    UserInputs.prototype.getDirection = function() {
      var dx, dy, moveFactor,
        _this = this;
      dy = 0;
      dx = 0;
      moveFactor = 5;
      console.log('current keys', this.currentKeys);
      _.each(this.currentKeys, function(key) {
        switch (key) {
          case 37:
            return dx -= moveFactor;
          case 38:
            return dy -= moveFactor;
          case 39:
            return dx += moveFactor;
          case 40:
            return dy += moveFactor;
        }
      });
      return {
        dx: dx,
        dy: dy
      };
    };

    return UserInputs;

  })();

}).call(this);
