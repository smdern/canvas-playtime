// Generated by CoffeeScript 1.4.0
(function() {
  var Circle, Colors, Game,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Circle = (function(_super) {

    __extends(Circle, _super);

    Circle.prototype.defaultOptions = {
      fillColor: createjs.Graphics.getRGB(0, 255, 0)
    };

    function Circle(args) {
      Circle.__super__.constructor.apply(this, arguments);
      _.defaults(args, this.defaultOptions);
      this.graphics.beginFill(this.defaultOptions.fillColor);
      this.graphics.drawCircle(0, 0, 40);
    }

    return Circle;

  })(createjs.Shape);

  Colors = {
    green: "#33A534",
    black: "#000000",
    red: "#FF2600"
  };

  Game = (function() {

    function Game(targetCanvas) {
      this.update = __bind(this.update, this);

      this.createShapes = __bind(this.createShapes, this);

      this.start = __bind(this.start, this);
      this.stage = new createjs.Stage(targetCanvas);
      createjs.Ticker.addListener(this.update, true);
    }

    Game.prototype.start = function() {
      this.createShapes();
      this.stage.addChild(this.circle);
      return this.stage.addChild(this.text);
    };

    Game.prototype.createShapes = function() {
      this.text = new createjs.Text("Some Text");
      this.text.x = 10;
      this.text.y = 20;
      this.circle = new Circle();
      this.circle.x = 20;
      return this.circle.y = 50;
    };

    Game.prototype.update = function(dt) {
      console.log('updating', dt);
      this.circle.x += dt / 10;
      this.circle.y += dt / 10;
      this.text.scaleX += 0.2;
      this.text.scaleY += 0.2;
      this.text.rotation += 10;
      return this.stage.update();
    };

    return Game;

  })();

  $(document).ready(function() {
    var PlayTime, targetCanvas;
    PlayTime = {};
    targetCanvas = document.getElementById('canvas');
    PlayTime.game = new Game(targetCanvas);
    return PlayTime.game.start();
  });

}).call(this);
