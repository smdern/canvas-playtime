// Generated by CoffeeScript 1.4.0
(function() {
  var Box, Game, UserInputs,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Box = (function() {

    Box.prototype.defaultOptions = {
      x: 0,
      y: 0,
      width: 10,
      height: 10,
      fillStyle: 'black'
    };

    function Box(args) {
      this.draw = __bind(this.draw, this);

      var _this = this;
      _.defaults(args, this.defaultOptions);
      _.each(['x', 'y', 'width', 'height', 'fillStyle'], function(option) {
        return _this[option] = args[option];
      });
    }

    Box.prototype.draw = function(context) {
      context.fillStyle = this.fillStyle;
      context.beginPath();
      context.rect(this.x, this.y, this.width, this.height);
      context.closePath();
      return context.fill();
    };

    return Box;

  })();

  Game = (function() {

    function Game() {
      this.clear = __bind(this.clear, this);

      this.animate = __bind(this.animate, this);

      this.tick = __bind(this.tick, this);

      this.gameLoop = __bind(this.gameLoop, this);

      this.getInput = __bind(this.getInput, this);

      this.start = __bind(this.start, this);

      var $canvas;
      $canvas = $('canvas');
      this.context = $canvas[0].getContext('2d');
      this.width = $canvas.width();
      this.height = $canvas.height();
      this.userInput = new UserInputs();
      this.box = new Box({
        x: 100,
        y: 150,
        fillStyle: this.colors.green,
        width: 200
      });
      this.requestAnimationFrame = this.getAnimationRequest();
    }

    Game.prototype.colors = {
      green: "#33A534",
      black: "#000000",
      red: "#FF2600"
    };

    Game.prototype.getAnimationStartTime = function() {
      return window.mozAnimationStartTime || window.msAnimationStartTime || window.webkitAnimationStartTime || window.oAnimationStartTime || Date.now();
    };

    Game.prototype.start = function() {
      return setInterval(this.gameLoop, 500);
    };

    Game.prototype.getInput = function() {
      this.userInput.updateCurrentKeys();
      console.log('previous keys', this.userInput.previousKeys);
      return console.log('current keys', this.userInput.currentKeys);
    };

    Game.prototype.gameLoop = function() {
      this.getInput();
      return this.tick();
    };

    Game.prototype.tick = function() {
      this.stepStartTime = this.getAnimationStartTime();
      return this.requestAnimationFrame.call(window, this.animate);
    };

    Game.prototype.getAnimationRequest = function() {
      return window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
    };

    Game.prototype.animate = function(timestamp) {
      var dt;
      dt = timestamp - this.stepStartTime;
      console.log('dt', dt);
      this.clear();
      return this.box.draw(this.context);
    };

    Game.prototype.clear = function() {
      return this.context.clearRect(0, 0, this.width, this.height);
    };

    return Game;

  })();

  $(document).ready(function() {
    var PlayTime;
    PlayTime = {};
    PlayTime.game = new Game();
    return PlayTime.game.start();
  });

  UserInputs = (function() {

    function UserInputs() {
      this.updateCurrentKeys = __bind(this.updateCurrentKeys, this);

    }

    UserInputs.prototype.previousKeys = [];

    UserInputs.prototype.currentKeys = [];

    UserInputs.prototype.updateCurrentKeys = function() {
      this.previousKeys = this.currentKeys;
      return this.currentKeys = key.getPressedKeyCodes();
    };

    return UserInputs;

  })();

}).call(this);
